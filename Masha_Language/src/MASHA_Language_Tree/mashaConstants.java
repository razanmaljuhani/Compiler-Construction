/* Generated By:JJTree&JavaCC: Do not edit this line. mashaConstants.java */
package MASHA_Language_Tree;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface mashaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STATIC_ID = 5;
  /** RegularExpression Id. */
  int VARIABLE_ID = 6;
  /** RegularExpression Id. */
  int CONSTANT_ID = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int FLOAT = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int LIST_ELEMENTS = 11;
  /** RegularExpression Id. */
  int CAPITAL_LETTER = 12;
  /** RegularExpression Id. */
  int DIGIT = 13;
  /** RegularExpression Id. */
  int SMALL_LETTER = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int FUN = 17;
  /** RegularExpression Id. */
  int UNTIL = 18;
  /** RegularExpression Id. */
  int VAR = 19;
  /** RegularExpression Id. */
  int LIST = 20;
  /** RegularExpression Id. */
  int PLUS = 21;
  /** RegularExpression Id. */
  int MINUS = 22;
  /** RegularExpression Id. */
  int MULTIPLY = 23;
  /** RegularExpression Id. */
  int DIVIDE = 24;
  /** RegularExpression Id. */
  int ASSIGNMENT = 25;
  /** RegularExpression Id. */
  int EQUAL = 26;
  /** RegularExpression Id. */
  int INEQUAL = 27;
  /** RegularExpression Id. */
  int LESS_THAN = 28;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 29;
  /** RegularExpression Id. */
  int GREAT_THAN = 30;
  /** RegularExpression Id. */
  int GREAT_OR_EQUAL = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int XOR = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int LEFT_PAR = 36;
  /** RegularExpression Id. */
  int RIGHT_PAR = 37;
  /** RegularExpression Id. */
  int LEFT_SQR_BRACKT = 38;
  /** RegularExpression Id. */
  int RIGHT_SQR_BRACKT = 39;
  /** RegularExpression Id. */
  int DOUBLE_QUOTES = 40;
  /** RegularExpression Id. */
  int COMMA = 41;
  /** RegularExpression Id. */
  int FULL_STOP = 42;
  /** RegularExpression Id. */
  int COLON = 43;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<STATIC_ID>",
    "<VARIABLE_ID>",
    "<CONSTANT_ID>",
    "<INT>",
    "<FLOAT>",
    "<STRING>",
    "<LIST_ELEMENTS>",
    "<CAPITAL_LETTER>",
    "<DIGIT>",
    "<SMALL_LETTER>",
    "\"if\"",
    "\"else\"",
    "\"Fun\"",
    "\"Until\"",
    "\"var\"",
    "\"list\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"=?\"",
    "\"~=?\"",
    "\"<?\"",
    "\"<=?\"",
    "\">?\"",
    "\">=?\"",
    "\"&\"",
    "\"OR\"",
    "\"XOR\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\" \\\" \"",
    "\",\"",
    "\".\"",
    "\":\"",
    "<SINGLE_LINE_COMMENT>",
  };

}
