/* Generated By:JJTree&JavaCC: Do not edit this line. masha.java */
package MASHA_Language_Tree;

public class masha/*@bgen(jjtree)*/implements mashaTreeConstants, mashaConstants {/*@bgen(jjtree)*/
  protected static JJTmashaState jjtree = new JJTmashaState();public static void main(String args [])
  {
    System.out.println("   Welcome to Masha language");
    System.out.print("-------------------------------\u005cn");
    masha parser = new masha(System.in);
    while (true)
    {
      System.out.print("\u005cnPlease enter an expression:");
      try
      {
        SimpleNode n = masha.Start();
        n.dump("Masha Tree >>");
        System.out.println("Good Job! Your statment is Correct :) .\u005cn\u005cn");
      }
      catch (Exception e)
      {
        System.out.println();
        System.out.println("Oops.Wrong statement, Try again :( \u005cn\u005cn");
        System.out.println(e.getMessage());
        masha.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops. Not accepted statement, Try again :( .\u005cn\u005cn");
        break;
      }
    }
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
      case VARIABLE_ID:
      case CONSTANT_ID:
      case INT:
      case FLOAT:
      case IF:
      case FUN:
      case UNTIL:
      case VAR:
      case NOT:
      case LEFT_PAR:
        if (jj_2_1(2)) {
          decleration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
          case LEFT_PAR:
            logical_stmt();
            break;
          case IF:
            conditional_stmt();
            break;
          case STATIC_ID:
          case VARIABLE_ID:
          case CONSTANT_ID:
          case INT:
          case FLOAT:
            comparison_stmet();
            break;
          case FUN:
          case UNTIL:
            loop();
            break;
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case LIST:
        list();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decleration() throws ParseException {
 /*@bgen(jjtree) decleration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2)) {
        declere_VAR();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
          arithmetic_stmt();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      FULL_STOP();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// used to write an arithmetic expression.
  static final public void arithmetic_stmt() throws ParseException {
 /*@bgen(jjtree) arithmetic_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
          ID();
          break;
        case INT:
        case FLOAT:
          number();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        artimatic_operation();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
          ID();
          break;
        case INT:
        case FLOAT:
          number();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used an artimatic statment!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// this method used to declare a variable
  static final public void declere_VAR() throws ParseException {
 /*@bgen(jjtree) declere_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLERE_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VAR();
      ID();
      ASSIGNMENT();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
      case VARIABLE_ID:
      case CONSTANT_ID:
        ID();
        break;
      case INT:
      case FLOAT:
        number();
        break;
      case STRING:
        STRING();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// work
  static final public void logical_stmt() throws ParseException {
 /*@bgen(jjtree) logical_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAR:
        Binary_logical_stmt();
        break;
      case NOT:
        unary_logical_stmt();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used a logical statment!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void unary_logical_stmt() throws ParseException {
 /*@bgen(jjtree) unary_logical_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY_LOGICAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NOT();
      LEFT_PAR();
      comparison_stmet();
      RIGHT_PAR();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Binary_logical_stmt() throws ParseException {
 /*@bgen(jjtree) Binary_logical_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARY_LOGICAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LEFT_PAR();
      comparison_stmet();
      RIGHT_PAR();
      logical_operation();
      LEFT_PAR();
      comparison_stmet();
      RIGHT_PAR();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void conditional_stmt() throws ParseException {
 /*@bgen(jjtree) conditional_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IF();
      LEFT_PAR();
      comparison_stmet();
      RIGHT_PAR();
      COLON();
      LEFT_SQR_BRACKT();
      label_2:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
        case IF:
        case FUN:
        case UNTIL:
        case VAR:
        case LIST:
        case NOT:
        case LEFT_PAR:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
      }
      RIGHT_SQR_BRACKT();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        else_stmt();
        break;
      case FULL_STOP:
        FULL_STOP();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used a conditional statment!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void else_stmt() throws ParseException {
 /*@bgen(jjtree) else_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ELSE();
      LEFT_SQR_BRACKT();
      label_3:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
        case IF:
        case FUN:
        case UNTIL:
        case VAR:
        case LIST:
        case NOT:
        case LEFT_PAR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
      }
      RIGHT_SQR_BRACKT();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// work
  static final public void comparison_stmet() throws ParseException {
 /*@bgen(jjtree) comparison_stmet */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON_STMET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
      case VARIABLE_ID:
      case CONSTANT_ID:
        ID();
        break;
      case INT:
      case FLOAT:
        number();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      comparison_operation();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
      case VARIABLE_ID:
      case CONSTANT_ID:
        ID();
        break;
      case INT:
      case FLOAT:
        number();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used a comparison statment!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// used to create a loop
  static final public void loop() throws ParseException {
 /*@bgen(jjtree) loop */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNTIL:
        until();
        break;
      case FUN:
        fun();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used an Iterative statement!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void until() throws ParseException {
 /*@bgen(jjtree) until */
  SimpleNode jjtn000 = new SimpleNode(JJTUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UNTIL();
      LEFT_PAR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
      case VARIABLE_ID:
      case CONSTANT_ID:
      case INT:
      case FLOAT:
        comparison_stmet();
        break;
      case NOT:
      case LEFT_PAR:
        logical_stmt();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RIGHT_PAR();
      COLON();
      LEFT_SQR_BRACKT();
      label_4:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
        case IF:
        case FUN:
        case UNTIL:
        case VAR:
        case LIST:
        case NOT:
        case LEFT_PAR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
      }
      RIGHT_SQR_BRACKT();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void fun() throws ParseException {
 /*@bgen(jjtree) fun */
  SimpleNode jjtn000 = new SimpleNode(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FUN();
      LEFT_PAR();
      INT();
      COLON();
      INT();
      COLON();
      INT();
      RIGHT_PAR();
      COLON();
      LEFT_SQR_BRACKT();
      label_5:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC_ID:
        case VARIABLE_ID:
        case CONSTANT_ID:
        case INT:
        case FLOAT:
        case IF:
        case FUN:
        case UNTIL:
        case VAR:
        case LIST:
        case NOT:
        case LEFT_PAR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
      }
      RIGHT_SQR_BRACKT();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used a function!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void list() throws ParseException {
 /*@bgen(jjtree) list */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LIST();
      ID();
      ASSIGNMENT();
      LEFT_SQR_BRACKT();
      LIST_ELEMENTS();
      RIGHT_SQR_BRACKT();
      FULL_STOP();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.println("You used a list!");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ID() throws ParseException {
 /*@bgen(jjtree) ID */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC_ID:
        STATIC_ID();
        break;
      case VARIABLE_ID:
        VARIABLE_ID();
        break;
      case CONSTANT_ID:
        CONSTANT_ID();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void number() throws ParseException {
 /*@bgen(jjtree) number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        INT();
        break;
      case FLOAT:
        FLOAT();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void artimatic_operation() throws ParseException {
 /*@bgen(jjtree) artimatic_operation */
  SimpleNode jjtn000 = new SimpleNode(JJTARTIMATIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        PLUS();
        break;
      case MINUS:
        MINUS();
        break;
      case MULTIPLY:
        MULTIPLY();
        break;
      case DIVIDE:
        DIVIDE();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void logical_operation() throws ParseException {
 /*@bgen(jjtree) logical_operation */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        AND();
        break;
      case OR:
        OR();
        break;
      case XOR:
        XOR();
        break;
      case NOT:
        NOT();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void comparison_operation() throws ParseException {
 /*@bgen(jjtree) comparison_operation */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISON_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        EQUAL();
        break;
      case INEQUAL:
        INEQUAL();
        break;
      case LESS_THAN:
        LESS_THAN();
        break;
      case LESS_OR_EQUAL:
        LESS_OR_EQUAL();
        break;
      case GREAT_THAN:
        GREAT_THAN();
        break;
      case GREAT_OR_EQUAL:
        GREAT_OR_EQUAL();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//terminals-------------
  static final public void FULL_STOP() throws ParseException {
 /*@bgen(jjtree) FULL_STOP */
  SimpleNode jjtn000 = new SimpleNode(JJTFULL_STOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(FULL_STOP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ASSIGNMENT() throws ParseException {
 /*@bgen(jjtree) ASSIGNMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(ASSIGNMENT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void STRING() throws ParseException {
 /*@bgen(jjtree) STRING */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LIST() throws ParseException {
 /*@bgen(jjtree) LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LIST);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void PLUS() throws ParseException {
 /*@bgen(jjtree) PLUS */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(PLUS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MINUS() throws ParseException {
 /*@bgen(jjtree) MINUS */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(MINUS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MULTIPLY() throws ParseException {
 /*@bgen(jjtree) MULTIPLY */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(MULTIPLY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DIVIDE() throws ParseException {
 /*@bgen(jjtree) DIVIDE */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(DIVIDE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void INT() throws ParseException {
 /*@bgen(jjtree) INT */
  SimpleNode jjtn000 = new SimpleNode(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(INT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FLOAT() throws ParseException {
 /*@bgen(jjtree) FLOAT */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LEFT_PAR() throws ParseException {
 /*@bgen(jjtree) LEFT_PAR */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFT_PAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LEFT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RIGHT_PAR() throws ParseException {
 /*@bgen(jjtree) RIGHT_PAR */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHT_PAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IF() throws ParseException {
 /*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(IF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void COLON() throws ParseException {
 /*@bgen(jjtree) COLON */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(COLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ELSE() throws ParseException {
 /*@bgen(jjtree) ELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(ELSE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LEFT_SQR_BRACKT() throws ParseException {
 /*@bgen(jjtree) LEFT_SQR_BRACKT */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFT_SQR_BRACKT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LEFT_SQR_BRACKT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RIGHT_SQR_BRACKT() throws ParseException {
 /*@bgen(jjtree) RIGHT_SQR_BRACKT */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHT_SQR_BRACKT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(RIGHT_SQR_BRACKT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void UNTIL() throws ParseException {
 /*@bgen(jjtree) UNTIL */
  SimpleNode jjtn000 = new SimpleNode(JJTUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(UNTIL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void FUN() throws ParseException {
 /*@bgen(jjtree) FUN */
  SimpleNode jjtn000 = new SimpleNode(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(FUN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void STATIC_ID() throws ParseException {
 /*@bgen(jjtree) STATIC_ID */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATIC_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(STATIC_ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VARIABLE_ID() throws ParseException {
 /*@bgen(jjtree) VARIABLE_ID */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(VARIABLE_ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CONSTANT_ID() throws ParseException {
 /*@bgen(jjtree) CONSTANT_ID */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(CONSTANT_ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AND() throws ParseException {
 /*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(AND);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OR() throws ParseException {
 /*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(OR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void XOR() throws ParseException {
 /*@bgen(jjtree) XOR */
  SimpleNode jjtn000 = new SimpleNode(JJTXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(XOR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void NOT() throws ParseException {
 /*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(NOT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void EQUAL() throws ParseException {
 /*@bgen(jjtree) EQUAL */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void INEQUAL() throws ParseException {
 /*@bgen(jjtree) INEQUAL */
  SimpleNode jjtn000 = new SimpleNode(JJTINEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(INEQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LESS_THAN() throws ParseException {
 /*@bgen(jjtree) LESS_THAN */
  SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LESS_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LESS_OR_EQUAL() throws ParseException {
 /*@bgen(jjtree) LESS_OR_EQUAL */
  SimpleNode jjtn000 = new SimpleNode(JJTLESS_OR_EQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LESS_OR_EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void GREAT_THAN() throws ParseException {
 /*@bgen(jjtree) GREAT_THAN */
  SimpleNode jjtn000 = new SimpleNode(JJTGREAT_THAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(GREAT_THAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void GREAT_OR_EQUAL() throws ParseException {
 /*@bgen(jjtree) GREAT_OR_EQUAL */
  SimpleNode jjtn000 = new SimpleNode(JJTGREAT_OR_EQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(GREAT_OR_EQUAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LIST_ELEMENTS() throws ParseException {
 /*@bgen(jjtree) LIST_ELEMENTS */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(LIST_ELEMENTS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VAR() throws ParseException {
 /*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t0;
    try {
      t0 = jj_consume_token(VAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t0.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(CONSTANT_ID)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    if (jj_3R_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(STATIC_ID)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public mashaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x683e0,0x1e83e0,0x3e0,0x3e0,0x3e0,0x3e0,0x7e0,0x0,0x1e83e0,0x10000,0x1e83e0,0x3e0,0x3e0,0x60000,0x3e0,0x1e83e0,0x1e83e0,0xe0,0x300,0x1e00000,0x0,0xfc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x400,0x18,0x0,0x0,0x0,0x18,0x18,0x18,0x0,0x0,0x0,0xf,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public masha(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public masha(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new mashaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public masha(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new mashaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public masha(mashaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(mashaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
